---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["split.smi-spec.io"]
  resources: ["trafficsplits"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations"]
  verbs: ["list", "get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Grafana RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQUtzZ255VS8xY0pzajkvTHJOcmZVMk13RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBM01qa3hNRE15TURoYQpGdzB5TXpBM01qa3hNRE15TURoYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURVd20xcEFHMGpCSmxyVldnTTdBVXAKaVoyRWxIbTRyQzJJTDdEZ1UxU2lTVXBCRDRVRG9lZ3dvMk1CSWNybGpqczBQengvMVYwK1NwWXl4MXhwWGRXbgpRT0NyNk9XZGJYdEg4T1RuaVdENWJzZ2JjYTJwVjQvYmZBMHpiNmN4djZrcENpWWVDU3M2bEgwajY5dnlEb1FmCkY5dXRFYWRiZXFSU3F0UGZUSVRKSlovcmF1eVMvMlorNEdWb1NZZXdlamZLV1VrNzFKdEszbkpTdEE3K3lCSnUKa20yREp3aUxHSG5LV1p6OHR3eC9rTDNwSDFTc1E1eElhZTgyT1d6OE11aXlyVDBLdTFQbTdrM2lUL3NOQXk2RwpLWllTVlpKZ1ZtVUFaMDc1cUtGZFljVUNaSk9BRnhRaVFVQnhqajN1ekcwOGE1OVBrWFRZbUQ2TytwTmdVSWFyCkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQnBoeVYwajdVMWhONHpMam4rSDJYRzNkOHh3MGFICkh2UnFoZUs1Si9DV3lteW1OVEUxL1N6TUhmYnlqcUFyL090d00wS2k4cExhZXR0ckJtMCsxeDk0c3BOZWpCblYKbVUzTnAzQ3NxbzhaSkNKdngwSmJNbUlNT3I3Zjd1R1ZsZ2dPNUdkWWlNZWlIWW0vRllHMmhFMlNITDdoYnVWUAp3T1dHMXhMdlRLOVNmMkFIbjg2a1pGM1NSSFlGd3RGcTNySTdUNisrNDZUSEZ3cmJTZERJYW5ENTJVQzdRdUNiCnpLbWh1cHNGa2JMRGFyRERTWFJXaDJYYXNaQndlUmwyYk1PcXIyNk1Oeml1VTNScGVtTjd3bC9RYlByc29uamkKZC9pcWZ5a01nRnY5Z2pTWER4eGVwYlVNNjZxZUpOdU9XZkVpZllhQ3hORHA5YTFTVTh4aE9CTW8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMU1KdGFRQnRJd1NaYTFWb0RPd0ZLWW1kaEpSNXVLd3RpQyt3NEZOVW9rbEtRUStGCkE2SG9NS05qQVNISzVZNDdORDg4ZjlWZFBrcVdNc2RjYVYzVnAwRGdxK2psblcxN1IvRGs1NGxnK1c3SUczR3QKcVZlUDIzd05NMituTWIrcEtRb21IZ2tyT3BSOUkrdmI4ZzZFSHhmYnJSR25XM3FrVXFyVDMweUV5U1dmNjJycwprdjltZnVCbGFFbUhzSG8zeWxsSk85U2JTdDV5VXJRTy9zZ1NicEp0Z3ljSWl4aDV5bG1jL0xjTWY1Qzk2UjlVCnJFT2NTR252Tmpscy9ETG9zcTA5Q3J0VDV1NU40ay83RFFNdWhpbVdFbFdTWUZabEFHZE8rYWloWFdIRkFtU1QKZ0JjVUlrRkFjWTQ5N3N4dFBHdWZUNUYwMkpnK2p2cVRZRkNHcXdJREFRQUJBb0lCQVFDVVVLMWd3MUZSVmdWMQpVMlpqaTZ6VmxmOWV5dnBIaUk5OUhuSFpEMzR5VzVFTjVibStISUgyVmcvUVhEUks3bW5MTkVJQ2cwU3JCZWZLCm9qdURvRXd1ZWdXbEVZZnZ4TUJxR0Q0YVFpUjkvWUkxejN0V1Q1b1RVVmtLZ0UwM1d2cWJoMTJuRnBFeUZ3MWQKbXpBS2Y2QU81TnpZdXpQRmk2czlqYVNCUjZCUmIwa1lxT0tDb0R2c1VwSDZ0ZDBVUDVNdE9KMkFNNUZqNnJyZwpRMzM4bWFKa04rN0xTYWtTSE4xNUhiSTVvalVhbko3cE5OcVc2YXVROGxDdW4yNE1BTE82bEM5VEkrRzN2TldvCjdNRXN3VEh0RjRMTkU0L1RDb2NoMVU5NVRpWlJ5amtKaHZFbW8zMnBmQnlsQWhPNkhoQmZTTG5pUXJaT1UzZmUKTjk2TG9TREJBb0dCQVBnL0crL2ZQRi9VNFFFcXZQd2dDNWRBbWdSckNyeXZCaXA1OGtMLzZEKzBzSStyVUtDOApnem9zclV2NzArdW1BcjJoRGVycS8xQ2xUeVErUmx6a0x0M3c2aGcxWjlUdXA1b0M5MWJ3UjNDTEhGZzB6M0lOCmVzWFZvdWVnWk51Z2ZTY1dNRTJWaTQrTGpYWmV1UDZCNG5VU1lsOWI3eE5waE1JWUZKRXhtY2k3QW9HQkFOdG4KazViajB2NHFoQmRYckZvRWlFV1VBSzM4OHZlNTlRdGVWM1B1VmNKbC94OUk1dGdVVFR3czdMK3YyUExESjFDTAo2b2EwS2hkSlBLYXMzTVM5MXpHQTEwdGprYXJRUU16SmJGVENPVjQzUDFDWm01MjUwMEtwdW1ONmxjYVJTS2dUCjJyeXphaHUrQ2pkc3I2ZlVBZmpPZ01FSEV6S1lJN3d6TmNaenk1TFJBb0dBQ21pN0J5ZlpKRHVNNDd1akNQOWUKL1F5Y2FLc0VYRDBLaVNWcjN4dFQ1YmZ4MzFSVG9TbkdadDRRdGlydEMraCtITzF2NC9YT2x0Y1hwbkZtQ2VjWApmLzdtRWZYTFVNWmhDTGd2SHRvY1pMK3doSkpTVUhuNE4rdHBWVVVJZFowWklsWnYyQkQ1TlIrbzR0bTk4QTRLCkxOYUVnWE1kWnpiNWRob0VZc0l0ckprQ2dZQWxKb2VtSUJPRTkvdi8yOWVTTW54RWs4ZjlyZndTR0VtMjBCV3MKeXFsNHpqNkJ0SjFwN3g0WTExNkxJcUp3a0x6aWRaNlRpb1FxQnp1ZTJWeFViL1MxTENUSVhpYTNMcVlhUnV6eAorU1V2bjlrM3M1clcvVFVaYjVYZzdFdmFJSldWNkM2OGp3Q2ppKzA4NzBsYStKb1E0QjZMRU1DZWE0WjVnbzVUCmVSMzZVUUtCZ1FEUzNvYStSandlNkdyV2Jib1FsWUE4WlhRYmhuME9zb01DSVRsemNKMlZ6NThrVkRSSlBzeEYKMmE5K3VEUWtaOTRxMVdZalQyZmVhQ3d4K2lFYjBXTTlVSU5RUWdSZHlWaDFyYk1kR3ZIWldUS0VzZnJmSmV3SApHUXBGcUljR0JCRVZSdzdCZTZWcjJxYzluTFhSZ1VheEdPanF0QU1kTlkreGJRbjdJN3NmVlE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQUtzZ255VS8xY0pzajkvTHJOcmZVMk13RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBM01qa3hNRE15TURoYQpGdzB5TXpBM01qa3hNRE15TURoYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURVd20xcEFHMGpCSmxyVldnTTdBVXAKaVoyRWxIbTRyQzJJTDdEZ1UxU2lTVXBCRDRVRG9lZ3dvMk1CSWNybGpqczBQengvMVYwK1NwWXl4MXhwWGRXbgpRT0NyNk9XZGJYdEg4T1RuaVdENWJzZ2JjYTJwVjQvYmZBMHpiNmN4djZrcENpWWVDU3M2bEgwajY5dnlEb1FmCkY5dXRFYWRiZXFSU3F0UGZUSVRKSlovcmF1eVMvMlorNEdWb1NZZXdlamZLV1VrNzFKdEszbkpTdEE3K3lCSnUKa20yREp3aUxHSG5LV1p6OHR3eC9rTDNwSDFTc1E1eElhZTgyT1d6OE11aXlyVDBLdTFQbTdrM2lUL3NOQXk2RwpLWllTVlpKZ1ZtVUFaMDc1cUtGZFljVUNaSk9BRnhRaVFVQnhqajN1ekcwOGE1OVBrWFRZbUQ2TytwTmdVSWFyCkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQnBoeVYwajdVMWhONHpMam4rSDJYRzNkOHh3MGFICkh2UnFoZUs1Si9DV3lteW1OVEUxL1N6TUhmYnlqcUFyL090d00wS2k4cExhZXR0ckJtMCsxeDk0c3BOZWpCblYKbVUzTnAzQ3NxbzhaSkNKdngwSmJNbUlNT3I3Zjd1R1ZsZ2dPNUdkWWlNZWlIWW0vRllHMmhFMlNITDdoYnVWUAp3T1dHMXhMdlRLOVNmMkFIbjg2a1pGM1NSSFlGd3RGcTNySTdUNisrNDZUSEZ3cmJTZERJYW5ENTJVQzdRdUNiCnpLbWh1cHNGa2JMRGFyRERTWFJXaDJYYXNaQndlUmwyYk1PcXIyNk1Oeml1VTNScGVtTjd3bC9RYlByc29uamkKZC9pcWZ5a01nRnY5Z2pTWER4eGVwYlVNNjZxZUpOdU9XZkVpZllhQ3hORHA5YTFTVTh4aE9CTW8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
spec:
  server:
    name: admin
  client:
    # for kubelet probes and prometheus scraping
    unauthenticated: true

---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: linkerd-admin
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
spec:
  server:
    name: proxy-admin
  client:
    # for kubelet probes
    unauthenticated: true

---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.4
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: 951a7b61ff59229914ca604c671353e5fdc0eda710bde2bfbb50c9225225babe
        linkerd.io/created-by: linkerd/helm stable-2.11.4
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/metrics-api:stable-2.11.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
spec:
  server:
    name: metrics-api
  client:
    meshTLS:
      serviceAccounts:
      - name: web
      - name: prometheus
---
###
### Grafana
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
data:
  grafana.ini: |-
    instance_name = grafana
    [server]
    root_url = %(protocol)s://%(domain)s:/grafana/
    [auth]
    disable_login_form = true
    [auth.anonymous]
    enabled = true
    org_role = Editor
    [auth.basic]
    enabled = false
    [analytics]
    check_for_updates = false
    [panels]
    disable_sanitize_html = true
    [log]
    mode = console
    [log.console]
    format = text
    level = info
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus.linkerd-viz.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      version: 1
      editable: true

  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
        homeDashboardId: linkerd-top-line
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.4
    component: grafana
    namespace: linkerd-viz
  name: grafana
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.11.4
      labels:
        linkerd.io/extension: viz
        component: grafana
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - env:
        - name: GF_PATHS_DATA
          value: /data
        # Force using the go-based DNS resolver instead of the OS' to avoid failures in some environments
        # see https://github.com/grafana/grafana/issues/20096
        - name: GODEBUG
          value: netdns=go
        image: cr.l5d.io/linkerd/grafana:stable-2.11.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        resources:
        securityContext:
          runAsUser: 472
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/grafana
          name: grafana-config
          readOnly: true
      serviceAccountName: grafana
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          items:
          - key: grafana.ini
            path: grafana.ini
          - key: datasources.yaml
            path: provisioning/datasources/datasources.yaml
          - key: dashboards.yaml
            path: provisioning/dashboards/dashboards.yaml
          name: grafana-config
        name: grafana-config
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: grafana
  labels:
    linkerd.io/extension: viz
    component: grafana
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: grafana
  labels:
    linkerd.io/extension: viz
    component: grafana
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
spec:
  server:
    name: grafana
  client:
    # web, prometheus and the kubelet probes
    unauthenticated: true
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'grafana'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['linkerd-viz']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        action: keep
        regex: ^grafana$

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.4
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.11.4
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --log.format=logfmt
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.19.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.4
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: aa5366485f0f9f269cc0002ddf3753df92df99956a621331f17e9f95cdd8a63f
        linkerd.io/created-by: linkerd/helm stable-2.11.4
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.11.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
spec:
  server:
    name: tap-api
  client:
    # traffic coming from kube-api
    unauthenticated: true
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRUm9mT0FYWG44V1RoRHVCUndMdmFuekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURjeQpPVEV3TXpJd09Wb1hEVEl6TURjeU9URXdNekl3T1Zvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQUtqY0tyQXpuS3kxL3ZsKyttWXZIVnIwMHFTdmprVDBCakgwdmh0K0FtdGFZWGowenNTWVdTNDhlNEFyMDYwOQoxNEkwRCsvOUFGc0xDM0hTVmxoTGZsK0FURHZJS29MVzRRQU0yeFlBelpCTVRqdjdjNms4aGpZbUR1TFY1R2xVCk1hYll1UU92ZmJQWkJwMG54VlZ0NVNsZWE5UDJOWThKVjRWOUhJU0JJVnNOK0VMTWI0MjgzQVlyeVYybzJEY1AKMzRRcVo4bnZQRC9BeUZBRzBMNWVhU0N4TCtqbVRFbGNaWmVxRWQ1ak1hd2c2bW5WTDc4OHhpeWt4OHJOeDlrNwpwek1qZlZaTy84clczSkJaSkFndWlrNnBEU01udGVKakRUdGhLMlpLT1RhS1BTckNibUdzY2xJbnV6N1N3ZGFtCjV1amxWN0dENGVyQVNYNzN3SVRSMHlzQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBSGJVVDZMN0pJQWJSOFpSVFhXRTdOblZuNnRhdFJSQzRGelJxUDdiT0FQSld1K2JITm9XK1VPRzNTd2gKMngyc0tPMVI5b1hQajROU0pGS3FSY0R3b3Y3TEpMbDN3aDlLUG82RXd4R1hxRHhKbVcwS1pCM0dJNjVVYVpkUApuWWdKaFZmRUlBUE5mczEycmVrK1ltY0U4blB2bzVpRkR1R3FSci8xQzhsZkREM2ZzdVBodGFiWUlOdmtJTlR6Ck5kR3hNRXdkcDYrTzlKc3BzWGxTclpQaHdwSGNObTgvOVZiMlVuZ2ZkaW80RE53Q2RURzBodzRxdWRQbTZCSEMKQWtIM2kyalZIZFJpaUlGNnEvaTI3aTMwb3o3MlVkTjFiWk5uNEYwUXBLaUN0MDVTTk5vOHdUbHB3OWlmYVgvUgpaTUswRXZxYWVna2R3TVdUWFlIVU1IUmJkdTg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcU53cXNET2NyTFgrK1g3NlppOGRXdlRTcEsrT1JQUUdNZlMrRzM0Q2ExcGhlUFRPCnhKaFpMang3Z0N2VHJUM1hnalFQNy8wQVd3c0xjZEpXV0V0K1g0Qk1POGdxZ3RiaEFBemJGZ0ROa0V4T08vdHoKcVR5R05pWU80dFhrYVZReHB0aTVBNjk5czlrR25TZkZWVzNsS1Y1cjAvWTFqd2xYaFgwY2hJRWhXdzM0UXN4dgpqYnpjQml2SlhhallOdy9maENwbnllODhQOERJVUFiUXZsNXBJTEV2Nk9aTVNWeGxsNm9SM21NeHJDRHFhZFV2CnZ6ekdMS1RIeXMzSDJUdW5NeU45Vms3L3l0YmNrRmtrQ0M2S1Rxa05JeWUxNG1NTk8yRXJaa281Tm9vOUtzSnUKWWF4eVVpZTdQdExCMXFibTZPVlhzWVBoNnNCSmZ2ZkFoTkhUS3dJREFRQUJBb0lCQURkdjhPUGdUZk8xM0h2MAo0Q2hrRjNNaEpYYkQzQ1Z2S0FtR25GTlNUMkVIVHpEeXpsOWsxUUtGQU5iWGpLczN2bVVVeXBhenJVWTJuZzlFClN1eTUvRWRHUzhEa3VuQXlNN1JjaENENUtvUFJTVzRQNDYwUUhjL3hOcm5xRnc4dGdRK1IzMHdDZFhaeUxlV3kKaE9yREpaVXJWcU5FRmRsYjY4djdnejFOVjdJWW55bSt3OFZ0NFF1WTlQNExPMUtqT0lkdldud043SDVHV1pEMQovRW00UDVZWnlDenlVckFpTCtqalErdzliZmxnSTNVQVhxL0RaanRTOXVyeDdaS01VTHZXRmlhRmVoQzRLbE0zCmZPbXZzczkrcEs1Z1h2Q0UyQVZocDRRU1pyZ3lXSi9WeXFIVFdEM0RML2g5TW5sSEovUXlMQ3RzNEc2NS9TUloKa29BelNzRUNnWUVBM3drbTdnYXY4TDQ5N0tycHhEdzRLZHVLRDFBL01NTzZIenhEREJKS0pSZmpGVmNVcEw1RQp5cGRyQlhmQUthdGRPdEVPYnNGTHovYzBPYUUxNzRBcnlXWlFXZHlBREZ2dFNwa0NjN1pmZHFlWjhlYmRSeEJzCktqcVRNVEJNOXNDaCs3Z1NvcnB1L0ZZeW54ZG5pVkl1OW1oYitEVFVWMXNlNUVaa05RY2VVWWtDZ1lFQXdkRTAKcFdqenp2SWt4dDE3Vm5HKytLOVdtaHpJUTA3ZjM5MUcwcmNwYmNycko5endFZ2F0OHhzTStMUVo4RVMvdWRETAplQ0JUYUNrTko5RGU1UUI0U3ZtMzhJdHNDL2NBRjhHSm5IV2poaE1Ub0NZeUFKWGJqKzJDZkNwYW1sVS9BY3AzClVrd0hnNVVkN0hoY0dVUnY3ZVJvYjBUTXQ1YVpCVXRYMUhvUUZoTUNnWUVBa2VtUDRXcllrYncwRVBBanJURGsKWVdYeUpXQ1BacHkxMkJkNW1aMGhpckRjN0NvakpFQWlDeFFTZk9wQitrRFU1bFM4aDNMSDRVOU5pR0pTUWRSdApVUDR4bFFodmNTWjIwRFhYNTlHcEZKeERWNEY4eERBWFEyMDh2SkpuMTRwZ3JxaFc4TVRkTlJKRFhkZFc4ZnlsCklxbFZlY1UrSWNSSUtubHV0MDVuNUZrQ2dZQUUwNURjRGFFRXBrTUVNTC9CaDFPYUhjT3FVczBwMyt6elJpOWQKVC9KWUtaVnhpSzd4dy9qUTlQdDl0ZjV2WFVibythb1hjN2FnQVdXeWVDRVUwczRzRDh2azBaUC9PRWRvVUFsOQpPL0MyaGdNWEdkeGs1MVp3WHhuQXZjMUR5cHVuRDhPbzZQdkc2dyt6czh1WFZYejBENXdLS1V4dnhmQkprWGErCmM4dXl3UUtCZ1FDQUt0cWVzVU9CclNqQklWb0JsaGVLSTV6UmF0UFFZanQ1YnlIRDdCZS9IeWlBQnRDUjBVRy8KNjBzYlgrOENQMTdPMXFVK1pjZytXUTFlZDJQemdxZWgvK05pMWlnVjhwalRHSHk2ZzdVeld0QmJQTTJiY0VRQgpUWjRhVUdIWGpvRmFuTmxaQWVKeFg4MmFzT1ZrWkNUSDdnbjN1YWYxOFVZK1VqVGNTZVI1R2c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRUm9mT0FYWG44V1RoRHVCUndMdmFuekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURjeQpPVEV3TXpJd09Wb1hEVEl6TURjeU9URXdNekl3T1Zvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQUtqY0tyQXpuS3kxL3ZsKyttWXZIVnIwMHFTdmprVDBCakgwdmh0K0FtdGFZWGowenNTWVdTNDhlNEFyMDYwOQoxNEkwRCsvOUFGc0xDM0hTVmxoTGZsK0FURHZJS29MVzRRQU0yeFlBelpCTVRqdjdjNms4aGpZbUR1TFY1R2xVCk1hYll1UU92ZmJQWkJwMG54VlZ0NVNsZWE5UDJOWThKVjRWOUhJU0JJVnNOK0VMTWI0MjgzQVlyeVYybzJEY1AKMzRRcVo4bnZQRC9BeUZBRzBMNWVhU0N4TCtqbVRFbGNaWmVxRWQ1ak1hd2c2bW5WTDc4OHhpeWt4OHJOeDlrNwpwek1qZlZaTy84clczSkJaSkFndWlrNnBEU01udGVKakRUdGhLMlpLT1RhS1BTckNibUdzY2xJbnV6N1N3ZGFtCjV1amxWN0dENGVyQVNYNzN3SVRSMHlzQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBSGJVVDZMN0pJQWJSOFpSVFhXRTdOblZuNnRhdFJSQzRGelJxUDdiT0FQSld1K2JITm9XK1VPRzNTd2gKMngyc0tPMVI5b1hQajROU0pGS3FSY0R3b3Y3TEpMbDN3aDlLUG82RXd4R1hxRHhKbVcwS1pCM0dJNjVVYVpkUApuWWdKaFZmRUlBUE5mczEycmVrK1ltY0U4blB2bzVpRkR1R3FSci8xQzhsZkREM2ZzdVBodGFiWUlOdmtJTlR6Ck5kR3hNRXdkcDYrTzlKc3BzWGxTclpQaHdwSGNObTgvOVZiMlVuZ2ZkaW80RE53Q2RURzBodzRxdWRQbTZCSEMKQWtIM2kyalZIZFJpaUlGNnEvaTI3aTMwb3o3MlVkTjFiWk5uNEYwUXBLaUN0MDVTTk5vOHdUbHB3OWlmYVgvUgpaTUswRXZxYWVna2R3TVdUWFlIVU1IUmJkdTg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 6e4fe52485eef67dd3edd683989df1b7792e606d25b4c8c06efba5c7e3af4d78
        linkerd.io/created-by: linkerd/helm stable-2.11.4
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.11.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
spec:
  server:
    name: tap-injector-webhook
  client:
    # traffic coming from kube-api
    unauthenticated: true
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.4
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.4
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.11.4
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000
        - -controller-namespace=linkerd
        - -viz-namespace=linkerd-viz
        - -log-level=info
        - -log-format=plain
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/web:stable-2.11.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
spec:
  routes:
  - name: POST /api/v1/query
    condition:
      method: POST
      pathRegex: /api/v1/query
  - name: GET /api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/v1/query_range
  - name: GET /api/v1/series
    condition:
      method: GET
      pathRegex: /api/v1/series
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: grafana.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
spec:
  routes:
  - name: GET /api/annotations
    condition:
      method: GET
      pathRegex: /api/annotations
  - name: GET /api/dashboards/tags
    condition:
      method: GET
      pathRegex: /api/dashboards/tags
  - name: GET /api/dashboards/uid/{uid}
    condition:
      method: GET
      pathRegex: /api/dashboards/uid/.*
  - name: GET /api/dashboard/{dashboard}
    condition:
      method: GET
      pathRegex: /api/dashboard/.*
  - name: GET /api/datasources/proxy/1/api/v1/series
    condition:
      method: GET
      pathRegex: /api/datasources/proxy/1/api/v1/series
  - name: GET /api/datasources/proxy/1/api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/datasources/proxy/1/api/v1/query_range
  - name: GET /api/search
    condition:
      method: GET
      pathRegex: /api/search
  - name: GET /d/{uid}/{dashboard-name}
    condition:
      method: GET
      pathRegex: /d/[^/]*/.*
  - name: GET /public/build/{style}.css
    condition:
      method: GET
      pathRegex: /public/build/.*\.css
  - name: GET /public/fonts/{font}
    condition:
      method: GET
      pathRegex: /public/fonts/.*
  - name: GET /public/img/{img}
    condition:
      method: GET
      pathRegex: /public/img/.*
